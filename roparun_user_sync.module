<?php

/**
 * Implements hook_menu().
 */
function roparun_user_sync_menu() {
  $items['admin/config/civimrf/roparun_user_sync'] = array(
    'title' => 'Roparun User Synchronisation',
    'description' => 'Edit the synchronisation settings for Roparun User Synchronisation.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('roparun_user_sync_admin_form'),
    'access arguments' => array('administer cmrf'),
    'file' => 'roparun_user_sync.admin.inc',
    'weight' => 0,
  );
	return $items;
}

function roparun_user_sync_cron() {
	$settings = roparun_user_sync_get_settings();
	$parameters = array();
	$options = array();
	if ($settings['cache']) {
		$options['cache'] = $settings['cache'];
	}
	$call = roparun_user_sync_send_call($settings['api_entity'], $settings['api_action'], $parameters, $options, $settings['profile']);
	$users = $call->getReply();
	if (isset($users['is_error']) && $users['is_error']) {
		watchdog('error', 'Could not synchronize users');
		return;
	}
	$saved_uids = array();
	foreach($users['values'] as $user) {
		$user = roparun_user_sync_syncuser($user);
		if ($user) {
			$saved_uids[] = $user->field_roparun_user_sync_uid['und'][0]['value'];
		}
	}

	// Delete all users which where not in the set.
	roparun_user_sync_delete_user_by_uid_is_not($saved_uids);
}

/**
 * Syncs a user to an existing or new user.
 */
function roparun_user_sync_syncuser($user) {
	$settings = roparun_user_sync_get_settings();
	$uid = $user[$settings['uid_attribute']];
	$username = $user[$settings['username_attribute']];
	$email = $user[$settings['email_attribute']];
	
	$account = roparun_user_sync_load_user($uid, $username);
	if ($account) {
		$edit = array();
		$edit['name'] = $username;
		$edit['mail'] = $email;
		$edit['status'] = 1;
		$edit['field_roparun_user_sync_uid']['und'][0]['value'] = $uid;
		return user_save($account, $edit);
	} else {
		$edit = array();
		$edit['name'] = $username;
		$edit['mail'] = $email;
		$edit['status'] = 1;
		$edit['field_roparun_user_sync_uid']['und'][0]['value'] = $uid;
		$edit['init'] = $email;
		$edit['pass'] = user_password();
		$account = user_save(null, $edit);

		$params['account'] = $account;
  	$language = user_preferred_language($account);
  	drupal_mail('user', 'status_canceled', $account->mail, $language, $params);
		
		return $account;
	}
	return false;
}

function roparun_user_sync_delete_user_by_uid_is_not($uids) {

	$query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'user', '=');
	if (count($uids)) {
		$query->fieldCondition('field_roparun_user_sync_uid', 'value', $uids, 'NOT IN');
	} else {
		$query->fieldCondition('field_roparun_user_sync_uid', 'value', 0, '>');
	}
    
	$result = $query->execute();
	if (isset($result['user'])) {
		foreach($result['user'] as $user) {
			$account = user_load($user->uid);
			user_delete($account->uid);
			
			$params['account'] = $account;
    	$language = user_preferred_language($account);
    	drupal_mail('user', 'status_canceled', $account->mail, $language, $params);
		}
	}
}

/**
 * Load a user by its uid or its username.
 */
function roparun_user_sync_load_user($uid, $username) {
	// First lookup the user by the uid.	
	$query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'user', '=')
    ->fieldCondition('field_roparun_user_sync_uid', 'value', $uid, '=');
  $result = $query->execute();
	if (isset($result['user'])) {
		foreach($result['user'] as $user) {
			return user_load($user->uid);
		}
	}
	
	// If the user is not found see whether we can find it by its username.
	$query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'user', '=')
    ->propertyCondition('name', $username);
  $result = $query->execute();
	if (isset($result['user'])) {
		foreach($result['user'] as $user) {
			return user_load($user->uid);
		}
	}
	
	// User not found.
	return null;
}

function roparun_user_sync_get_connector_name($profile) {
  return 'roparun_user_sync_connector:'.$profile;
}

function roparun_user_sync_get_connector_id($profile=null) {
  $connector_name = roparun_user_sync_get_connector_name($profile);

  $core = cmrf_core_get_core();
  $connector_id = variable_get($connector_name);
  if (empty($connector_id)) {
    $connector_id = $core->registerConnector($connector_name, $profile);
    variable_set($connector_name, $connector_id);
  }
  return $connector_id;
}

function roparun_user_sync_send_call($entity, $action, $parameters, $options, $profile) {
  $connector_id = roparun_user_sync_get_connector_id($profile);
  $core = cmrf_core_get_core();
  $call = $core->createCall($connector_id, $entity, $action, $parameters, $options);
  $core->executeCall($call);
  return $call;
}

function roparun_user_sync_get_settings() {
	return array(
		'profile' => variable_get('roparun_user_sync_profile', null),
		'cache' => variable_get('roparun_user_sync_cache', '60 seconds'),
		'api_entity' => variable_get('roparun_user_sync_api_entity', 'RoparunTeam'),
		'api_action' => variable_get('roparun_user_sync_api_action', 'getcaptains'),
		'uid_attribute' => variable_get('roparun_user_sync_uid_attribute', 'participant_id'),
		'username_attribute' => variable_get('roparun_user_sync_username_attribute', 'email'),
		'email_attribute' => variable_get('roparun_user_sync_email_attribute', 'email'),
	);
}

/**
 * Hide the uid field from the form.
 */
function roparun_user_sync_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $current_user = user_uid_optional_load();
  if (!in_array('administrator', $current_user->roles)) {
    $form['field_roparun_user_sync_uid']['#access'] = false;
  }
}
